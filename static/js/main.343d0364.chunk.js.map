{"version":3,"sources":["butt.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Button","className","CardList","robots","Error","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","position","top","left","bottom","right","overflow","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAUeA,EARA,WACX,OACE,6BACE,4BAAQC,UAAU,UAAlB,sCCoBOC,EAtBE,SAAC,GAAa,EAAZC,OAEf,MAAM,IAAIC,MAAO,kBCUNC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACE,yBAAKN,UAAU,OACb,2BACAA,UAAU,mCACVO,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCqBLI,EA3BA,SAACC,GACZ,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,QACRC,SAAU,aAMZ,yBACGJ,MAAO,CACNI,SAAU,WACVC,IAAK,IACLC,KAAM,IACNC,OAAQ,QACRC,MAAO,QACPC,SAAU,WAEbV,EAAMW,YCHAC,E,kDAnBX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKjB,MAAMW,a,GAhBEQ,aCgEZC,G,8DAvDX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACxB,YAAa4B,EAAMC,OAAOC,SAfzC,EAAKX,MAAQ,CACXtB,OAAQ,GACRG,YAAa,IAJL,E,gEASM,IAAD,OACf+B,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAE3B,OAAQsC,S,+BAQtC,IAAD,EACyBZ,KAAKJ,MAA5BtB,EADF,EACEA,OAAQG,EADV,EACUA,YACNoC,EAAiBvC,EAAOwC,QAAO,SAAAC,GACnC,OAAOA,EAAMC,KACVC,cACAC,SAASzC,EAAYwC,kBAE5B,OAAQ3C,EAAO6C,OAGb,yBAAK/C,UAAU,MACb,wBAAIA,UAAU,MAAd,eAGA,kBAAC,EAAD,CAAWM,aAAcsB,KAAKI,iBAC9B,kBAAC,EAAD,KAEE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU9B,OAAQuC,KAGpB,yBAAK7B,MAAO,CAAEoC,MAAO,QACnB,uDAEF,kBAAC,EAAD,QAhBJ,2C,GA7BQlB,cCEEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.343d0364.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = () => {\r\n    return (\r\n      <div>\r\n        <button className=\"button\">Click Me! Just Another Test...:)</button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Card from './Card';\r\n \r\nconst CardList = ({robots}) => {\r\n  if(true){\r\n    throw new Error ('Nooooooooooo!')\r\n  }\r\n    return (\r\n      <div>\r\n        {/*PROPS robots are created in App.js when the component\r\n        ...is first created */}\r\n        {robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n      <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange = {searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n      <div\r\n        style={{\r\n          overflowY: \"hidden\",\r\n          border: \"5px solid black\",\r\n          height: \"800px\",\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        {/*PROPS are created here in the component and manipulated\r\n            ...with the property \"children\" of props to wrap this \r\n            ...component around the component specified in App.js .*/}\r\n        <div\r\n           style={{\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            bottom: '-20px',\r\n            right: '-20px', \r\n            overflow: 'scroll'\r\n           }}>\r\n        {props.children}</div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n       if(this.state.hasError) {\r\n           return <h1>Ooooops. That is not good</h1>\r\n       }\r\n       return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport Button from '../butt';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\nimport '../butt.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n          robots: [],\r\n          searchfield: '',\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n          .then((response) => response.json())\r\n          .then((users) => this.setState({ robots: users }));\r\n\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render(){\r\n      const { robots, searchfield} = this.state;\r\n          const filteredRobots = robots.filter(robot => {\r\n            return robot.name\r\n              .toLowerCase()\r\n              .includes(searchfield.toLowerCase());\r\n          })\r\n        return !robots.length ? (\r\n          <h1>Loading</h1>\r\n        ) : (\r\n          <div className=\"tc\">\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            {/*Creates a COMPONENT named \"SearchBox\" with the property \r\n              \"searchChange\".*/}\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n              {/*Creates a COMPONENT named \"Scroll\".*/}\r\n              <ErrorBoundry>\r\n                <CardList robots={filteredRobots} />\r\n              </ErrorBoundry>\r\n              {/*Creates a COMPONENT named \"CardList\" with the property \"robot\".*/}\r\n              <div style={{ color: \"red\" }}>\r\n                <p>I think I get it \"TEST\"</p>\r\n              </div>\r\n              <Button />\r\n            </Scroll>\r\n\r\n            {/*Must Comment where containers are made */}\r\n            {/*Scroll, SearchBox and CardList are normal components*/}\r\n            {/*App.js/App.css is a container */}\r\n          </div>\r\n        );\r\n        }\r\n      }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}